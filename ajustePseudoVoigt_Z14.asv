function ajustePseudoVoigt_ZC14()
    %% 1. Cargar espectro y corregir baseline
    data = readmatrix('C:\Users\OVER REGINO\Desktop\Espectroscopía RAMAN - copia\Linea base\espectro_corregido.txt');    
    x = data(:,1);
    y = data(:,2);
    bl = msbackadj(x, y, 'WindowSize', 50, 'StepSize', 25);
    y_corr = y - bl;

    %% 2. Detección automática de picos
    [pks, locs] = findpeaks(y_corr, x, 'MinPeakProminence', 0.05*max(y_corr));
    N = numel(locs);

    modoNamesAll = { ...
        'E2(low)', 'TA', 'LA', 'TO', 'A1(TO)', 'E1(TO)', 'E2(high)', ...
        'LO', 'A1(LO)', 'E1(LO)', 'TO+TA', 'LO+LA', ...
        'E1(LO)+A1(LO)', 'TO+E2(high)', ...
        '2LA', '2TO', '2LO', 'E2(high)-E2(low)', ...
        'B1(high)-B1(low)', 'Surface Optical Phonon (SOP)','Ce0_2' };

    modeCentersAll = [101, 150, 199, 399, 383, 412, 440, ...
                      582, 585.5, 589, 625, 699, 602, 549.7, ...
                      493.5, 978.9, 1102, 333, 284, 550, 466];

    %% 3. Inicialización y ajuste global
    modos0 = [pks(:), locs(:), repmat([3, 3, 0.5], N, 1)];
    b0 = [modos0(:); mean(y_corr)];
    lb = []; ub = [];
    for i = 1:N
        A0 = modos0(i,1); x0 = modos0(i,2);
        lb = [lb; 0; x0-10; 0.5; 0.5; 0];
        ub = [ub; 1.5*A0; x0+10; 20; 20; 1];
    end
    lb = [lb; -Inf]; ub = [ub; Inf];
    opts = optimoptions('lsqcurvefit', 'Display', 'off', 'MaxFunctionEvaluations', 1e5);
    model = @(b,xdata) modeloPseudovoigt(b,xdata);
    bfit = lsqcurvefit(model, b0, x, y_corr, lb, ub, opts);
    yfit_corr = model(bfit, x);
    yfit = yfit_corr + bl;

    %% 4. Ajuste local de picos individuales
    resultados = cell(numel(modoNamesAll), 7);
    for i = 1:numel(modoNamesAll)
        nombre = modoNamesAll{i};
        x0_teorico = modeCentersAll(i);
        resultados{i,1} = nombre;
        resultados{i,2} = x0_teorico;
        rango = 25;
        mascara = x >= (x0_teorico - rango) & x <= (x0_teorico + rango);
        x_sub = x(mascara);
        y_sub = y_corr(mascara);

        if numel(x_sub) < 10
            resultados{i,3:7} = {NaN, NaN, NaN, NaN, NaN};
            continue;
        end

        A0 = max(y_sub);
        sigma0 = 5; gamma0 = 5; eta0 = 0.5;
        p0 = [A0, x0_teorico, sigma0, gamma0, eta0];
        lb = [0, x0_teorico - 10, 0.5, 0.5, 0];
        ub = [2*A0, x0_teorico + 10, 20, 20, 1];

        model_pv = @(p, xdata) p(1) * pseudoVoigt(xdata, p(2), p(3), p(4), p(5));
        opts = optimoptions('lsqcurvefit','Display','off');
        try
            pfit = lsqcurvefit(model_pv, p0, x_sub, y_sub, lb, ub, opts);
            resultados{i,3} = pfit(2); % Centro ajustado
            resultados{i,4} = pfit(3); % Sigma
            resultados{i,5} = pfit(4); % Gamma
            resultados{i,6} = pfit(5); % Eta
            resultados{i,7} = pfit(1); % Amplitud
        catch
            resultados{i,3:7} = {NaN, NaN, NaN, NaN, NaN};
        end
    end

    %% 5. Cálculo de área y FWHM ajustado
    numPicos = numel(resultados(:,1));
    area = zeros(numPicos,1);
    FWHM = zeros(numPicos,1);

    % FWHM teóricos de la tabla que suministraste
    FWHM_teorico = [1.5, NaN, NaN, 6.5, NaN, , NaN, 12, 15, 20, ...
                    18, 20, 10, 15, 18, NaN, 20, 25, 20, 20, 50]';

    for i = 1:numPicos
        sigma = resultados{i,4};
        gamma = resultados{i,5};
        eta = resultados{i,6};
        A = resultados{i,7};

        if all(~isnan([sigma gamma eta A]))
            f_G = 2 * gamma;
            f_L = 2.35482 * sigma;
            FWHM(i) = (f_L^5 + 2.69269*f_L^4*f_G + 2.42843*f_L^3*f_G^2 + ...
                       4.47163*f_L^2*f_G^3 + 0.07842*f_L*f_G^4 + f_G^5)^(1/5);
            area(i) = A * (eta * pi * gamma + (1 - eta) * sigma * sqrt(2*pi));
        else
            FWHM(i) = NaN;
            area(i) = NaN;
        end
    end

    %% 6. Crear tabla final y exportar a Excel
    T = cell2table(resultados, 'VariableNames', {
        'ModoNormal', 'CentroTeorico_cm1', 'CentroAjustado_cm1', ...
        'Sigma', 'Gamma', 'Eta', 'Amplitud'});
    
    T.Area = area;
    T.FWHM_Ajustado_cm1 = FWHM;
    T.FWHM_Teorico_cm1 = FWHM_teorico;

    writetable(T, 'ajuste_pseudovoigt_local.xlsx');
    disp('Archivo Excel con parámetros ajustados, área y FWHM exportado correctamente.');
end

%% Modelo global
function y = modeloPseudovoigt(b,x)
    N = (length(b)-1)/5;
    y = zeros(size(x));
    for j = 1:N
        idx = (j-1)*5 + (1:5);
        A = b(idx(1)); x0 = b(idx(2));
        s = b(idx(3)); g = b(idx(4)); eta = b(idx(5));
        y = y + A * pseudoVoigt(x, x0, s, g, eta);
    end
    y = y + b(end);
end

%% Función Pseudo-Voigt
function V = pseudoVoigt(x, x0, sigma, gamma, eta)
    G = exp(-((x - x0).^2)/(2*sigma^2)) / (sigma * sqrt(2*pi));
    L = (gamma/pi) ./ ((x - x0).^2 + gamma^2);
    V = eta * L + (1 - eta) * G;
    V = V / max(V);
end
